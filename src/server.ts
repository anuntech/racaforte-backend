/**
 * RACA FORTE BACKEND - Servidor Principal
 * 
 * Sistema para gerenciamento de peÃ§as automotivas e anÃºncios.
 * Utiliza Fastify como framework web com suporte completo a TypeScript.
 * 
 * Funcionalidades principais:
 * - Gerenciamento de veÃ­culos (CRUD)
 * - Gerenciamento de peÃ§as automotivas (CRUD)
 * - Upload e processamento de imagens
 * - IntegraÃ§Ã£o com IA (Gemini/Grok) para anÃ¡lise de peÃ§as
 * - Sistema de anÃºncios automatizados
 * 
 * @author Equipe Raca Forte
 * @version 1.0.0
 */

import Fastify from 'fastify';
import cors from '@fastify/cors';
import { config } from 'dotenv';
import { healthRoutes } from './routes/health.js';
import { imageRoutes } from './routes/image.routes.js';
import { carRoutes } from './routes/car.routes.js';
import { partRoutes } from './routes/part.routes.js';

// Carrega variÃ¡veis de ambiente do arquivo .env
config();

/**
 * ConfiguraÃ§Ã£o do servidor Fastify
 * 
 * ConfiguraÃ§Ãµes otimizadas para:
 * - Compatibilidade com dispositivos iOS
 * - Upload de imagens grandes (atÃ© 100MB)
 * - Uso com ngrok em desenvolvimento
 * - Timeouts apropriados para operaÃ§Ãµes de IA
 */
const app = Fastify({
  logger: true,
  // ConfiguraÃ§Ãµes de timeout para operaÃ§Ãµes longas (IA, upload de imagens)
  requestTimeout: 300000, // 5 minutos para requisiÃ§Ãµes complexas
  bodyLimit: 104857600, // 100MB para upload de mÃºltiplas imagens
  keepAliveTimeout: 65000, // 65 segundos - compatibilidade iOS
  maxRequestsPerSocket: 0, // Sem limite de requests por socket
  
  // ConfiguraÃ§Ãµes de conexÃ£o
  connectionTimeout: 60000, // 60 segundos para estabelecer conexÃ£o
  pluginTimeout: 60000, // 60 segundos para carregar plugins
  trustProxy: true, // Essencial para ngrok/proxy reverso
  ignoreTrailingSlash: true, // Flexibilidade nas URLs
});

/**
 * ConfiguraÃ§Ã£o CORS
 * 
 * Configurado para aceitar requisiÃ§Ãµes de qualquer origem durante desenvolvimento.
 * Inclui headers especÃ­ficos para ngrok e compatibilidade com iOS.
 * 
 * IMPORTANTE: Em produÃ§Ã£o, configure 'origin' com domÃ­nios especÃ­ficos!
 */
app.register(cors, {
  origin: true, // TODO: Configurar domÃ­nios especÃ­ficos em produÃ§Ã£o
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: [
    'Content-Type', 
    'Authorization', 
    'ngrok-skip-browser-warning', // NecessÃ¡rio para desenvolvimento com ngrok
    'X-Requested-With',
    'Accept',
    'Origin',
    'User-Agent'
  ],
  credentials: true, // Permite cookies/auth headers
  
  // ConfiguraÃ§Ãµes especÃ­ficas para iOS
  optionsSuccessStatus: 200, // iOS prefere 200 ao invÃ©s de 204 para OPTIONS
  preflightContinue: false,
  maxAge: 86400 // Cache preflight por 24h - melhora performance
});

/**
 * Registro de rotas
 * 
 * Ordem de registro importante - health deve vir primeiro para monitoramento.
 * Cada mÃ³dulo tem suas prÃ³prias rotas organizadas por funcionalidade.
 */
app.register(healthRoutes);  // Monitoramento e status do servidor
app.register(imageRoutes);   // Upload e processamento de imagens
app.register(carRoutes);     // CRUD de veÃ­culos
app.register(partRoutes);    // CRUD de peÃ§as automotivas

/**
 * InicializaÃ§Ã£o do servidor
 * 
 * Utiliza variÃ¡veis de ambiente para configuraÃ§Ã£o flexÃ­vel.
 * Em desenvolvimento: HOST=localhost, PORT=3333
 * Em produÃ§Ã£o (Railway): HOST=0.0.0.0, PORT definido automaticamente
 */
const start = async () => {
  try {
    const host = process.env.HOST || '0.0.0.0';
    const port = Number(process.env.PORT) || 3333;

    await app.listen({ host, port });
    console.log(`ðŸš€ Servidor rodando em http://${host}:${port}`);
    console.log(`ðŸ“š DocumentaÃ§Ã£o da API: http://${host}:${port}/documentation`);
    
  } catch (err) {
    app.log.error('Erro ao iniciar o servidor:', err);
    process.exit(1);
  }
};

// Inicia o servidor
start();
