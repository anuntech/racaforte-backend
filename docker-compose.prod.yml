version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: raca_forte_db_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - racaforte_mysql_data:/var/lib/mysql
    networks:
      - raca_forte_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Raca Forte Backend API
  backend:
    image: ghcr.io/racaforte/backend:latest  # Substitua pelo seu registry
    container_name: raca_forte_backend_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      - HOST=0.0.0.0
      - PORT=3333
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - UNWRANGLE_API_KEY=${UNWRANGLE_API_KEY}
      - HETZNER_S3_ENDPOINT=${HETZNER_S3_ENDPOINT}
      - HETZNER_S3_BUCKET=${HETZNER_S3_BUCKET}
      - HETZNER_ACCESS_KEY=${HETZNER_ACCESS_KEY}
      - HETZNER_SECRET_KEY=${HETZNER_SECRET_KEY}
      - REMOVEBG_API_KEY=${REMOVEBG_API_KEY}
    ports:
      - "3333:3333"
    volumes:
      - racaforte_uploads:/app/uploads
    networks:
      - raca_forte_network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3333/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: sh -c "npx prisma migrate deploy && node dist/server.js"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Redis (para cache e sess√µes)
  redis:
    image: redis:7-alpine
    container_name: raca_forte_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - racaforte_redis_data:/data
    networks:
      - raca_forte_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Nginx (proxy reverso - opcional)
  nginx:
    image: nginx:alpine
    container_name: raca_forte_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - racaforte_nginx_logs:/var/log/nginx
    networks:
      - raca_forte_network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

volumes:
  racaforte_mysql_data:
    driver: local
  racaforte_redis_data:
    driver: local
  racaforte_uploads:
    driver: local
  racaforte_nginx_logs:
    driver: local

networks:
  raca_forte_network:
    driver: bridge
